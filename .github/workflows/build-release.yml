permissions:
  contents: write
name: Build OpenWrt Package

on:
  push:
    branches:
      - main
    paths:
      - 'Makefile'
      - '!**/.github/**'
  workflow_dispatch:

jobs:
  build:
    name: Build for ${{ matrix.version }} / ${{ matrix.target }}
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - version: openwrt-24.10
            target: x86_64
            suffix: all
    outputs:
      version: ${{ steps.patch_version.outputs.version }}

    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v5

      - name: 📛 Set PKG_NAME from repo
        run: echo "PKG_NAME=${{ github.event.repository.name }}" >> "$GITHUB_ENV"

      - name: 🧰 Set up luci-app-temp-status feed structure
        run: |
          set -e
          # Also add a shim so ../../luci.mk from package/feeds/jackie264/<pkg> works:
          mkdir -p package
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > package/luci.mk

          # LuCI-style layout so ../../luci.mk resolves from applications/<pkg>
          mkdir -p feed/luci/applications/${PKG_NAME}

          # Add shim luci/luci.mk pointing to the official LuCI feed
          mkdir -p feed/luci
          printf 'include $(TOPDIR)/feeds/luci/luci.mk\n' > feed/luci/luci.mk

          # Copy the package sources into the feed subdir (exclude CI and feed itself)
          rsync -av \
            --exclude='.git' \
            --exclude='feed' \
            --exclude='.github' \
            ./ feed/luci/applications/${PKG_NAME}/
          
      - name: 🧮 Compute ARCH
        run: |
          echo "ARCH=${{ matrix.target }}-${{ matrix.version }}" >> "$GITHUB_ENV"

      - name: 🏗️ Build with OpenWrt SDK
        uses: openwrt/gh-action-sdk@v9
        env:
          ARCH: ${{ env.ARCH }}
          FEEDNAME: jackie264
          PACKAGES: ${{ env.PKG_NAME }}
          INDEX: 0
          FEED_DIR: ${{ github.workspace }}/feed
          NO_SHFMT_CHECK: 1
          NO_REFRESH_CHECK: 1
          
      - name: 🔍 Debug build output
        run: |
          echo "=== Build directory structure ==="
          find . -name "*.ipk" -type f 2>/dev/null || echo "No .ipk files found"
          echo "=== bin directory structure ==="
          ls -la bin/ 2>/dev/null || echo "No bin directory found"
          if [ -d "bin/packages" ]; then
            echo "=== packages directory structure ==="
            find bin/packages/ -type f -name "*.ipk" 2>/dev/null || echo "No .ipk files in packages directory"
            echo "=== Full packages directory tree ==="
            ls -laR bin/packages/ 2>/dev/null || echo "No packages directory"
          fi

      - name: 📦 Upload artifact for ${{ matrix.target }}
        uses: actions/upload-artifact@v5
        with:
          name: ${{ env.PKG_NAME }}-${{ matrix.target }}-${{ matrix.version }}
          path: |
            bin/packages/*/jackie264/${{ env.PKG_NAME }}*.ipk
          if-no-files-found: ignore

  release:
    name: Release ${{ github.repository }}
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: 🧾 Checkout repo
        uses: actions/checkout@v5

      - name: 🔍 Extract version and release from Makefile
        id: version
        run: |
          PKG_VERSION=$(grep -E '^PKG_VERSION *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          PKG_RELEASE=$(grep -E '^PKG_RELEASE *:?=' Makefile | head -n1 | cut -d= -f2 | tr -d '[:space:]')
          COMBINED_VERSION="${PKG_VERSION}-${PKG_RELEASE}"
          echo "📦 Version: $COMBINED_VERSION"
          echo "version=$COMBINED_VERSION" >> "$GITHUB_OUTPUT"

      - name: ⬇️ Download all build artifacts
        uses: actions/download-artifact@v6
        with:
          path: ./release-assets

      - name: 🗃️ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Build-v${{ steps.version.outputs.version }}
          files: |
            ./release-assets/**/*.ipk
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout custom-packages repo
        uses: actions/checkout@v5
        with:
          repository: OneNAS-space/custom-packages
          token: ${{ secrets.CUSTOM_PACKAGES_TOKEN }}
          path: custom-packages

      - name: Update luci artifacts
        run: |
          mkdir -p custom-packages/luci
          
          find ./release-assets -type f -name "*.ipk" | while read -r f; do
            base=$(basename "$f")
            pkgname=$(echo "$base" | sed -E 's/^([^_]+)_.*$/\1/')
            echo "Cleaning old versions of $pkgname"
            rm -f custom-packages/luci/${pkgname}_*.ipk
            cp "$f" custom-packages/luci/
          done
          ls -la custom-packages/luci/
          echo "PKG_NAME=${{ github.event.repository.name }}" >> "$GITHUB_ENV"
          cd custom-packages
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add luci/
          git commit -m "Update to - v${{ steps.version.outputs.version }}" || echo "No changes"
          git push
